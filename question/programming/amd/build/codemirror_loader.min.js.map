{"version":3,"file":"codemirror_loader.min.js","sources":["../src/codemirror_loader.js"],"sourcesContent":["/* global CodeMirror, M */\n/**\n * Module AMD Moodle pour charger CodeMirror (core + modes) sans conflit RequireJS.\n * @module qtype_programming/codemirror_loader\n */\ndefine([], function() {\n\n    /**\n     * Injecte un script en conservant l'ordre de chargement (async=false).\n     * @param {string} url URL absolue ou basée sur M.cfg.wwwroot.\n     * @returns {Promise<void>} Promesse résolue quand le script est chargé.\n     */\n    function loadScript(url) {\n        return new Promise(function(resolve, reject) {\n            var s = document.createElement('script');\n            s.src = url;\n            s.async = false; // important pour garder l'ordre\n            s.onload = resolve;\n            s.onerror = function() {\n                reject(new Error('Erreur de chargement : ' + url));\n            };\n            document.head.appendChild(s);\n        });\n    }\n\n    /**\n     * Charge CodeMirror core + les modes nécessaires en \"aveuglant\" AMD temporairement\n     * pour éviter que le wrapper UMD de CodeMirror ne déclenche un define() anonyme.\n     * @returns {Promise<void>} Promesse résolue quand tous les scripts sont chargés.\n     */\n    function loadCodeMirrorFiles() {\n        var baseurl =\n            M.cfg.wwwroot + '/question/type/programming/thirdparty/codemirror';\n\n        var scripts = [\n            baseurl + '/lib/codemirror.js',\n            baseurl + '/mode/clike/clike.js',\n            baseurl + '/mode/python/python.js',\n            baseurl + '/mode/pascal/pascal.js',\n            baseurl + '/mode/perl/perl.js',\n            baseurl + '/mode/gas/gas.js',\n            baseurl + '/mode/shell/shell.js',\n            baseurl + '/mode/brainfuck/brainfuck.js',\n        ];\n\n        var savedDefine = window.define;\n        var savedModule = window.module;\n\n        return (function() {\n            // Désactive AMD/CommonJS pendant le chargement\n            try { window.define = undefined; } catch (e) {}\n            try { window.module = undefined; } catch (e) {}\n\n            // Chargement séquentiel\n            var chain = Promise.resolve();\n            scripts.forEach(function(u) {\n                chain = chain.then(function() { return loadScript(u); });\n            });\n            return chain;\n        })().finally(function() {\n            // Restaure l'environnement (split pour respecter max-len)\n            if (typeof savedDefine !== 'undefined') {\n                window.define = savedDefine;\n            } else {\n                try {\n                    delete window.define;\n                } catch (e) {\n                    // ignore\n                }\n            }\n\n            if (typeof savedModule !== 'undefined') {\n                window.module = savedModule;\n            } else {\n                try {\n                    delete window.module;\n                } catch (e) {\n                    // ignore\n                }\n            }\n        });\n    }\n\n    return {\n        /**\n         * Initialise un éditeur CodeMirror sur un <textarea>.\n         * @param {string} editorId ID du textarea.\n         * @param {string} initialLanguage Libellé de langue (ex: \"python3\", \"c++17\").\n         * @param {string} initialTheme Thème initial (ex: \"material-darker\" ou \"eclipse\").\n         * @param {string|null} toggleBtnId ID d’un bouton pour basculer le thème (ou null).\n         * @param {string|null} languageSelectId ID d’un <select> pour changer le mode (ou null).\n         * @returns {Promise<CodeMirror.Editor|undefined>} L’éditeur ou undefined si non créé.\n         */\n        init: async function(editorId, initialLanguage, initialTheme, toggleBtnId, languageSelectId) {\n            await loadCodeMirrorFiles();\n\n            if (typeof CodeMirror === 'undefined') {\n                return;\n            }\n\n            var langMap = {\n                python2: 'python',\n                python3: 'python',\n                c: 'text/x-csrc',\n                c11: 'text/x-csrc',\n                'c++03': 'text/x-c++src',\n                'c++11': 'text/x-c++src',\n                'c++14': 'text/x-c++src',\n                'c++17': 'text/x-c++src',\n                'c++20': 'text/x-c++src',\n                java8: 'text/x-java',\n                java: 'text/x-java',\n                pascal: 'pascal',\n                perl: 'perl',\n                brainfuck: 'brainfuck',\n                assemblyx86: 'gas',\n                assemblyx64: 'gas',\n                sed: 'shell',\n                text: 'text/plain',\n                default: 'text/plain'\n            };\n\n            var textarea = document.getElementById(editorId);\n            if (!textarea) {\n                return;\n            }\n\n            var currentTheme = initialTheme || 'material-darker';\n            var cleanedLanguage =\n                (initialLanguage || '').toLowerCase().replace(/\\s+/g, '');\n            var mode = langMap[cleanedLanguage] || langMap.default;\n\n            var editor = CodeMirror.fromTextArea(textarea, {\n                mode: mode,\n                theme: currentTheme,\n                lineNumbers: true,\n                indentUnit: 4,\n                tabSize: 4,\n                indentWithTabs: false,\n                matchBrackets: true,\n                autoCloseBrackets: true,\n                lineWrapping: true\n            });\n\n            if (toggleBtnId) {\n                var toggleBtn = document.getElementById(toggleBtnId);\n                if (toggleBtn) {\n                    toggleBtn.addEventListener('click', function() {\n                        currentTheme =\n                            (currentTheme === 'eclipse') ? 'material-darker' : 'eclipse';\n                        editor.setOption('theme', currentTheme);\n                    });\n                }\n            }\n\n            if (languageSelectId) {\n                var select = document.getElementById(languageSelectId);\n                if (select) {\n                    select.addEventListener('change', function() {\n                        var selectedLang =\n                            this.options[this.selectedIndex].text\n                                .toLowerCase()\n                                .replace(/\\s+/g, '');\n                        var newMode = langMap[selectedLang] || langMap.default;\n                        editor.setOption('mode', newMode);\n                    });\n                }\n            }\n\n            window['codemirrorEditor_' + editorId] = editor;\n            return editor;\n        }\n    };\n});\n"],"names":["define","loadCodeMirrorFiles","baseurl","M","cfg","wwwroot","scripts","savedDefine","window","savedModule","module","undefined","e","chain","Promise","resolve","forEach","u","then","url","reject","s","document","createElement","src","async","onload","onerror","Error","head","appendChild","finally","init","editorId","initialLanguage","initialTheme","toggleBtnId","languageSelectId","CodeMirror","langMap","python2","python3","c","c11","java8","java","pascal","perl","brainfuck","assemblyx86","assemblyx64","sed","text","default","textarea","getElementById","currentTheme","cleanedLanguage","toLowerCase","replace","mode","editor","fromTextArea","theme","lineNumbers","indentUnit","tabSize","indentWithTabs","matchBrackets","autoCloseBrackets","lineWrapping","toggleBtn","addEventListener","setOption","select","selectedLang","this","options","selectedIndex","newMode"],"mappings":"2NAKAA,6CAAO,IAAI,oBAyBEC,0BACDC,QACAC,EAAEC,IAAIC,QAAU,mDAEhBC,QAAU,CACVJ,QAAU,qBACVA,QAAU,uBACVA,QAAU,yBACVA,QAAU,yBACVA,QAAU,qBACVA,QAAU,mBACVA,QAAU,uBACVA,QAAU,gCAGVK,YAAcC,OAAOR,OACrBS,YAAcD,OAAOE,cAEjB,eAEEF,OAAOR,YAASW,EAAa,MAAOC,QACpCJ,OAAOE,YAASC,EAAa,MAAOC,QAGtCC,MAAQC,QAAQC,iBACpBT,QAAQU,SAAQ,SAASC,GACrBJ,MAAQA,MAAMK,MAAK,kBA5CXC,IA4C0CF,EA3CnD,IAAIH,SAAQ,SAASC,QAASK,YAC7BC,EAAIC,SAASC,cAAc,UAC/BF,EAAEG,IAAML,IACRE,EAAEI,OAAQ,EACVJ,EAAEK,OAASX,QACXM,EAAEM,QAAU,WACRP,OAAO,IAAIQ,MAAM,0BAA4BT,OAEjDG,SAASO,KAAKC,YAAYT,UATdF,UA8CLN,MAVH,GAWHkB,SAAQ,mBAEkB,IAAhBxB,YACPC,OAAOR,OAASO,4BAGLC,OAAOR,OAChB,MAAOY,YAKc,IAAhBH,YACPD,OAAOE,OAASD,4BAGLD,OAAOE,OAChB,MAAOE,cAOd,CAUHoB,kCAAM,iBAAeC,SAAUC,gBAAiBC,aAAcC,YAAaC,6NACjEpC,gCAEoB,oBAAfqC,6EAIPC,QAAU,CACVC,QAAS,SACTC,QAAS,SACTC,EAAG,cACHC,IAAK,sBACI,wBACA,wBACA,wBACA,wBACA,gBACTC,MAAO,cACPC,KAAM,cACNC,OAAQ,SACRC,KAAM,OACNC,UAAW,YACXC,YAAa,MACbC,YAAa,MACbC,IAAK,QACLC,KAAM,aACNC,QAAS,cAGTC,SAAWhC,SAASiC,eAAetB,gFAKnCuB,aAAerB,cAAgB,kBAC/BsB,iBACCvB,iBAAmB,IAAIwB,cAAcC,QAAQ,OAAQ,IACtDC,KAAOrB,QAAQkB,kBAAoBlB,QAAQc,QAE3CQ,OAASvB,WAAWwB,aAAaR,SAAU,CAC3CM,KAAMA,KACNG,MAAOP,aACPQ,aAAa,EACbC,WAAY,EACZC,QAAS,EACTC,gBAAgB,EAChBC,eAAe,EACfC,mBAAmB,EACnBC,cAAc,IAGdlC,cACImC,UAAYjD,SAASiC,eAAenB,eAEpCmC,UAAUC,iBAAiB,SAAS,WAChChB,aACsB,YAAjBA,aAA8B,kBAAoB,UACvDK,OAAOY,UAAU,QAASjB,iBAKlCnB,mBACIqC,OAASpD,SAASiC,eAAelB,oBAEjCqC,OAAOF,iBAAiB,UAAU,eAC1BG,aACAC,KAAKC,QAAQD,KAAKE,eAAe1B,KAC5BM,cACAC,QAAQ,OAAQ,IACrBoB,QAAUxC,QAAQoC,eAAiBpC,QAAQc,QAC/CQ,OAAOY,UAAU,OAAQM,YAKrCvE,OAAO,oBAAsByB,UAAY4B,gCAClCA"}