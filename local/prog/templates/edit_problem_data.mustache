<div class="form-container" style="max-width: 1000px; margin: auto;">
  {{{message}}}

  <h3>üõ†Ô∏è Edit Problem Data: {{code}}</h3>

  {{#zipfileurl}}
    <p>üìÅ <a href="{{zipfileurl}}" target="_blank">Download current zip file</a></p>
  {{/zipfileurl}}

  <form method="post" enctype="multipart/form-data">
    <input type="hidden" name="sesskey" value="{{sesskey}}">

    <label>Checker</label>
    <select name="checker" class="form-control" style="margin-bottom: 15px;">
      {{#checkers}}
        <option value="{{value}}" {{#selected}}selected{{/selected}}>{{label}}</option>
      {{/checkers}}
    </select>
    <div id="float-precision-options" style="display: none; margin-top: 10px;">
          <label>Precision (epsilon = 10<sup>-precision</sup>)</label>
          <input type="number" name="checker_args[precision]" value="{{metadata.checker_args.precision}}" class="form-control" min="0" max="15">
        </div>

    <label>Output Limit Length</label>
    <input type="number" name="output_limit" value="{{metadata.output_limit}}" class="form-control">

    <label>Output Prefix Length</label>
    <input type="number" name="output_prefix" value="{{metadata.output_prefix}}" class="form-control">

    <label><input type="checkbox" name="unicode" {{#metadata.unicode}}checked{{/metadata.unicode}}> Enable Unicode</label><br>
    <label><input type="checkbox" name="nobigmath" {{#metadata.nobigmath}}checked{{/metadata.nobigmath}}> Disable bigInteger / bigDecimal</label><br><br>

    <label>üì¶ Data zip file (.zip)</label>
    <input type="file" name="zipfile" accept=".zip" class="form-control"><br>

    <label>‚öôÔ∏è Generator file (optional)</label>
    <input type="file" name="generatorfile" accept=".py,.cpp,.sh,.txt" class="form-control">

    <h4>‚úèÔ∏è Existing Test Cases</h4>
    <table class="generaltable" id="testcase-table" style="width: 100%; margin-bottom: 20px;">
      <thead>
        <tr><th>Type</th><th>Input File</th><th>Output File</th><th>Points</th><th>Order</th><th>Action</th></tr>
      </thead>
      <tbody id="testcase-body">
        {{#testcases}}
          <tr>
            <td>
              <select name="test_cases[{{@index}}][type]" class="form-control" onchange="handleTypeChange(this)">
                <option value="C" {{#type_is_C}}selected{{/type_is_C}}>Normal case</option>
                <option value="S" {{#type_is_S}}selected{{/type_is_S}}>Batch start</option>
                <option value="E" {{#type_is_E}}selected{{/type_is_E}}>Batch end</option>
              </select>
            </td>
            <td><select name="test_cases[{{@index}}][input_file]" class="form-control">{{#input_files}}<option value="{{.}}">{{.}}</option>{{/input_files}}</select></td>
            <td><select name="test_cases[{{@index}}][output_file]" class="form-control">{{#output_files}}<option value="{{.}}">{{.}}</option>{{/output_files}}</select></td>
            <td><input type="number" name="test_cases[{{@index}}][points]" value="{{points}}" class="form-control"></td>
            <td><input type="number" name="test_cases[{{@index}}][order]" value="{{order}}" class="form-control"></td>
            <td><button type="button" onclick="removeRow(this)">‚ùå</button></td>
          </tr>
        {{/testcases}}
      </tbody>
    </table>

    <button type="button" class="btn btn-secondary" onclick="addTestCase()">‚ûï Add Test Case</button><br><br>
    <input type="submit" name="submitfull" value="üíæ Submit Changes" class="btn btn-primary">
  </form>
</div>

<script>
let latestInputOptions = '';
let latestOutputOptions = '';

document.addEventListener('DOMContentLoaded', function () {
  const checkerSelect = document.querySelector('select[name="checker"]');
  if (checkerSelect) {
    handleCheckerChange(checkerSelect);
    checkerSelect.addEventListener('change', function () {
      handleCheckerChange(this);
    });
  }

  function handleCheckerChange(select) {
    const value = select.value;
    const precisionDiv = document.getElementById('float-precision-options');

    if (['floats', 'floatsabs', 'floatsrel'].includes(value)) {
      precisionDiv.style.display = 'block';
    } else {
      precisionDiv.style.display = 'none';
    }
  }

  function addTestCase() {
    let caseIndex = document.querySelectorAll('#testcase-body tr').length;
    const tbody = document.getElementById('testcase-body');

    const inputOptions = latestInputOptions || '';
    const outputOptions = latestOutputOptions || '';

    const row = document.createElement('tr');
    row.innerHTML = `
      <td>
        <select name="test_cases[${caseIndex}][type]" class="form-control" onchange="handleTypeChange(this)">
          <option value="C" selected>Normal case</option>
          <option value="S">Batch start</option>
          <option value="E">Batch end</option>
        </select>
      </td>
      <td><select name="test_cases[${caseIndex}][input_file]" class="form-control">${inputOptions}</select></td>
      <td><select name="test_cases[${caseIndex}][output_file]" class="form-control">${outputOptions}</select></td>
      <td><input type="number" name="test_cases[${caseIndex}][points]" value="0" class="form-control"></td>
      <td><input type="number" name="test_cases[${caseIndex}][order]" value="${caseIndex + 1}" class="form-control"></td>
      <td><button type="button" onclick="removeRow(this)">‚ùå</button></td>
    `;
    tbody.appendChild(row);
  }

  window.addTestCase = addTestCase;

  window.removeRow = function (button) {
    button.closest('tr').remove();
  };

  window.handleTypeChange = function (select) {
    const row = select.closest('tr');
    const type = select.value;

    const inputFile = row.querySelector('select[name$="[input_file]"]');
    const outputFile = row.querySelector('select[name$="[output_file]"]');
    const points = row.querySelector('input[name$="[points]"]');
    const order = row.querySelector('input[name$="[order]"]');

    const disable = type !== 'C';

    [inputFile, outputFile, points, order].forEach(el => {
      if (el) {
        el.disabled = disable;
        if (disable) {
          el.classList.add('disabled');
        } else {
          el.classList.remove('disabled');
        }
      }
    });
  };

  const zipInput = document.querySelector('input[name="zipfile"]');
  if (zipInput) {
    zipInput.addEventListener('change', function (e) {
      const file = e.target.files[0];
      if (!file) return;

      const formData = new FormData();
      formData.append('zipfile', file);
      const sesskey = document.querySelector('input[name="sesskey"]').value;
      formData.append('sesskey', sesskey);

      const url = new URL(window.location.href);
      url.searchParams.set('ajax', '1');

      fetch(url.toString(), {
        method: 'POST',
        body: formData,
        credentials: 'same-origin'
      })
      .then(async response => {
        const text = await response.text();
        console.log('üì¶ R√©ponse brute ZIP AJAX:', text);

        try {
          const data = JSON.parse(text);
          if (data.error) {
            document.querySelector('.form-container').insertAdjacentHTML('afterbegin',
              `<div class="alert alert-danger">‚ùå Erreur ZIP : ${data.error}</div>`
            );
            return;
          }

          latestInputOptions = data.input_files.map(f => `<option value="${f}">${f}</option>`).join('');
          latestOutputOptions = data.output_files.map(f => `<option value="${f}">${f}</option>`).join('');

          document.querySelectorAll('select[name$="[input_file]"]').forEach(select => {
            select.innerHTML = latestInputOptions;
          });
          document.querySelectorAll('select[name$="[output_file]"]').forEach(select => {
            select.innerHTML = latestOutputOptions;
          });

          document.querySelector('.form-container').insertAdjacentHTML('afterbegin',
            `<div class="alert alert-success">‚úÖ ZIP analys√© automatiquement (${data.input_files.length} entr√©es trouv√©es)</div>`
          );

        } catch (err) {
          console.error('‚ö†Ô∏è Erreur JSON ou serveur :', err);
          alert('‚ö†Ô∏è R√©ponse non valide ou erreur de parsing JSON');
        }
      })
      .catch(error => {
        console.error('‚ùå Erreur r√©seau AJAX :', error);
        alert('‚ùå Erreur r√©seau AJAX');
      });
    });
  }
});
</script>

